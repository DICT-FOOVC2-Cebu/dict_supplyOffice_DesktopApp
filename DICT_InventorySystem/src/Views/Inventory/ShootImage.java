/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views.Inventory;
import Views.Inventory.AddInventory;
import Controller.InventoryController;
import Sections.CreateSection;
import Sections.SetSection;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 * @author Eunar B. Dayangco
 */
public class ShootImage extends javax.swing.JFrame implements Runnable, ThreadFactory{

    /**
     * Creates new form ShootImage
     */
    
    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    private AddInventory addInventory;
    private InventoryController controller;
    
    
    
    public ShootImage() {
        initComponents();
     
        init();
  
    }
    
    public ShootImage(AddInventory addInventory) {
        
        initComponents();
        this.addInventory = addInventory;
        init();
        
    }
    
    public void init(){
        
        displayCameraOnList();
        new SetSection().designForm(this, bodyPanel, "mini");
        //this.setSize(new Dimension(593,550));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel3 = new javax.swing.JPanel();
        headbar = new javax.swing.JPanel();
        closebtn = new javax.swing.JLabel();
        minbtn = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bodyPanel = new javax.swing.JPanel();
        cameraBody = new javax.swing.JPanel();
        captureImage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cameraList = new javax.swing.JComboBox<>();

        jButton1.setText("jButton1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        headbar.setBackground(new java.awt.Color(0, 0, 0));
        headbar.setLayout(null);

        closebtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/LoginComponents/cancel.png"))); // NOI18N
        closebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closebtnMouseClicked(evt);
            }
        });
        headbar.add(closebtn);
        closebtn.setBounds(560, 0, 30, 30);

        minbtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/LoginComponents/minimize.png"))); // NOI18N
        minbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minbtnMouseClicked(evt);
            }
        });
        headbar.add(minbtn);
        minbtn.setBounds(530, 0, 28, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("SHOOT IMAGE");
        headbar.add(jLabel3);
        jLabel3.setBounds(10, -6, 110, 40);

        getContentPane().add(headbar);
        headbar.setBounds(0, 0, 590, 30);

        bodyPanel.setBackground(new java.awt.Color(74, 184, 220));
        bodyPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        cameraBody.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout cameraBodyLayout = new javax.swing.GroupLayout(cameraBody);
        cameraBody.setLayout(cameraBodyLayout);
        cameraBodyLayout.setHorizontalGroup(
            cameraBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
        );
        cameraBodyLayout.setVerticalGroup(
            cameraBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 355, Short.MAX_VALUE)
        );

        captureImage.setBackground(new java.awt.Color(0, 0, 102));
        captureImage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        captureImage.setForeground(new java.awt.Color(255, 255, 255));
        captureImage.setText("CAPTURE");
        captureImage.setBorderPainted(false);
        captureImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureImageActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Choose Camera:");

        cameraList.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cameraList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cameraListItemStateChanged(evt);
            }
        });
        cameraList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cameraListMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cameraList, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(cameraBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(captureImage, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bodyPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(cameraList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(cameraBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(captureImage, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(bodyPanel);
        bodyPanel.setBounds(-1, 0, 590, 560);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void captureImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureImageActionPerformed
        // TODO add your handling code here:
        

        BufferedImage image = webcam.getImage();
        try {
            
            File outputfile = new File("image.png");
            ImageIO.write(image, "png", outputfile);
            ImageIcon icon = new ImageIcon(outputfile.getPath());
            addInventory.setImage(icon.getImage());
            addInventory.displayImage();
            this.dispose();
            webcam.close();
            
        } catch (IOException ex) {
            CreateSection.displayErrorMessage("Buffered Image to File Error", 
                    ex.toString());
            //Logger.getLogger(ShootImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        
    }//GEN-LAST:event_captureImageActionPerformed

    private void cameraListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cameraListItemStateChanged
        
        String seletedCamName = cameraList.getSelectedItem().toString();
        
        this.webcam = getCamera(seletedCamName);
        openCamera();
    }//GEN-LAST:event_cameraListItemStateChanged

    private void cameraListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cameraListMouseClicked
        
    }//GEN-LAST:event_cameraListMouseClicked

    private void closebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closebtnMouseClicked
        
        CreateSection.displayInfoMessage("Camera Info", 
                "Closing the Camera Form will save the capture!");
            BufferedImage image = webcam.getImage();
        try {
            
            File outputfile = new File("image.png");
            ImageIO.write(image, "png", outputfile);
            ImageIcon icon = new ImageIcon(outputfile.getPath());
            addInventory.setImage(icon.getImage());
            addInventory.displayImage();
            this.dispose();
            webcam.close();
            
        } catch (IOException ex) {
            CreateSection.displayErrorMessage("Buffered Image to File Error", 
                    ex.toString());
            //Logger.getLogger(ShootImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_closebtnMouseClicked

    private void minbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minbtnMouseClicked
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_minbtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShootImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShootImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShootImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShootImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShootImage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JPanel cameraBody;
    private javax.swing.JComboBox<String> cameraList;
    private javax.swing.JButton captureImage;
    private javax.swing.JLabel closebtn;
    private javax.swing.JPanel headbar;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel minbtn;
    // End of variables declaration//GEN-END:variables

    public void openCamera(){
        
        //set the body of camera, its size and layout
        cameraBody.setLayout(new FlowLayout());
        Dimension[] nonStandardResolutions = new Dimension[] {
                            WebcamResolution.PAL.getSize(),
                            WebcamResolution.PAL.getSize(),
                           new Dimension(cameraBody.getWidth(),cameraBody.getHeight()),
                           new Dimension(cameraBody.getWidth(),cameraBody.getHeight()),
         };
 
    
    
    this.webcam.setCustomViewSizes(nonStandardResolutions);
    try{
         this.webcam.setViewSize(WebcamResolution.PAL.getSize());
    }catch(IllegalArgumentException e){
    
    }
   
    Dimension size = WebcamResolution.PAL.getSize();
   // CreateSection.displayInfoMessage("size", size.getWidth()+"  - "+size.getHeight());
    
    
    panel = new WebcamPanel(this.webcam);
    panel.setPreferredSize(new Dimension(cameraBody.getWidth(),cameraBody.getHeight()));
    panel.setMirrored(true);
    JFrame frame = new JFrame();
    frame.add(panel);
    frame.pack();
    cameraBody.add(frame.getContentPane());
    cameraBody.getParent().revalidate();
   
    
    executor.execute(this);
    
    }

    @Override
    public void run() {
         do {
	        try {
		    Thread.sleep(100);
                }catch (InterruptedException e) {
                    e.printStackTrace();
                }

		Result result = null;
		BufferedImage image = null;
                if (this.webcam.isOpen()) {
                    if ((image = this.webcam.getImage()) == null) {
                            continue;
                    }
                    LuminanceSource source = new BufferedImageLuminanceSource(image);
		    BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

		    try {
			result = new MultiFormatReader().decode(bitmap);
		    }catch (NotFoundException e) {
			// fall thru, it means there is no QR code in image
		    }
		}

		if (result != null) {
		    JOptionPane.showMessageDialog(null,result.getText(), "Result",JOptionPane.INFORMATION_MESSAGE);
		}

		} while (true);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "example-runner");
	t.setDaemon(true);
	return t;
    }
    
    public void displayCameras(){
        
        
        this.webcam = Webcam.getWebcams().get(0);
    }
    
    public void displayCameraOnList(){
        
        cameraList.removeAllItems();
        
        for(Webcam cam:Webcam.getWebcams()){
            
            cameraList.addItem(cam.getName());
        }
        
        
    }
    
    public Webcam getCamera(String webcamName){
        
        Webcam captureCam = null;
        
        for(Webcam cam:Webcam.getWebcams()){
            
            String camName = cam.getName();
            
            if(camName.equals(webcamName)){
                
                captureCam = cam;
                break;
            }
        }
        
        return captureCam;
        
    }
    
    
    
}
